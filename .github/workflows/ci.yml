name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  release:
    types: [ created ]

env:
  GO_VERSION: 1.21
  GOLANGCI_LINT_VERSION: v1.54.2

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Download dependencies
      run: go mod download

    - name: Run tests
      run: make test

    - name: Run tests with coverage
      run: make test-coverage

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./build/coverage.out
        flags: unittests
        name: codecov-umbrella

  lint:
    name: Lint
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Run golangci-lint
      uses: golangci/golangci-lint-action@v3
      with:
        version: ${{ env.GOLANGCI_LINT_VERSION }}
        args: --timeout=5m

  # security:
  #   name: Security Scan
  #   runs-on: ubuntu-latest
  #   
  #   steps:
  #   - name: Checkout code
  #     uses: actions/checkout@v4
  #
  #   - name: Set up Go
  #     uses: actions/setup-go@v4
  #     with:
  #       go-version: ${{ env.GO_VERSION }}
  #
  #   - name: Run Gosec Security Scanner
  #     run: |
  #       # Configure git to use HTTPS instead of SSH
  #       git config --global url."https://github.com/".insteadOf "git@github.com:"
  #       git config --global url."https://".insteadOf "git://"
  #       # Set Go environment variables
  #       export GOPROXY=https://proxy.golang.org,direct
  #       export GOSUMDB=sum.golang.org
  #       export GOPRIVATE=
  #       # Install gosec
  #       go install github.com/securecodewarrior/gosec/v2/cmd/gosec@latest
  #       gosec ./...
  #
  #   - name: Run govulncheck
  #     run: |
  #       # Configure git to use HTTPS instead of SSH
  #       git config --global url."https://github.com/".insteadOf "git@github.com:"
  #       git config --global url."https://".insteadOf "git://"
  #       # Set Go environment variables
  #       export GOPROXY=https://proxy.golang.org,direct
  #       export GOSUMDB=sum.golang.org
  #       export GOPRIVATE=
  #       # Install govulncheck
  #       go install golang.org/x/vuln/cmd/govulncheck@latest
  #       govulncheck ./...

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: [test, lint]
    
    strategy:
      matrix:
        os: [linux, darwin, windows]
        arch: [amd64, arm64]
        exclude:
          - os: windows
            arch: arm64
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Build binary
      env:
        GOOS: ${{ matrix.os }}
        GOARCH: ${{ matrix.arch }}
      run: |
        mkdir -p build
        BINARY_NAME=volcano-job-analyzer-${{ matrix.os }}-${{ matrix.arch }}
        if [ "${{ matrix.os }}" = "windows" ]; then
          BINARY_NAME="${BINARY_NAME}.exe"
        fi
        go build -ldflags="-w -s -X main.buildVersion=${GITHUB_REF#refs/tags/} -X main.buildDate=$(date -u +%Y-%m-%dT%H:%M:%SZ)" \
          -o build/${BINARY_NAME} .

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: volcano-job-analyzer-${{ matrix.os }}-${{ matrix.arch }}
        path: build/volcano-job-analyzer-*

  docker:
    name: Docker Build
    runs-on: ubuntu-latest
    needs: [test, lint]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Docker Hub
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        registry: docker.io
        username: faheem047
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: faheem047/volcano-job-analyzer
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [build]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Set up Kind
      uses: helm/kind-action@v1.8.0
      with:
        cluster_name: test-cluster
        kubectl_version: v1.28.0

    - name: Install Volcano
      run: |
        kubectl apply -f https://raw.githubusercontent.com/volcano-sh/volcano/master/installer/volcano-development.yaml
        kubectl wait --for=condition=ready pod -l app=volcano-controller -n volcano-system --timeout=300s

    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: volcano-job-analyzer-linux-amd64
        path: build/

    - name: Make binary executable
      run: chmod +x build/volcano-job-analyzer-linux-amd64

    - name: Run integration tests
      run: |
        export PATH=$PWD/build:$PATH
        ln -s volcano-job-analyzer-linux-amd64 build/volcano-job-analyzer
        make test-integration

  release:
    name: Release
    runs-on: ubuntu-latest
    if: github.event_name == 'release'
    needs: [test, lint, build, integration-test]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts/

    - name: Create release assets
      run: |
        mkdir -p release
        for dir in artifacts/*/; do
          if [ -d "$dir" ]; then
            cp "$dir"* release/
          fi
        done
        cd release
        sha256sum * > checksums.txt

    - name: Upload release assets
      uses: softprops/action-gh-release@v1
      with:
        files: release/*
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}